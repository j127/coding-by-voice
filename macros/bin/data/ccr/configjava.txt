from dragonfly import *
from caster.lib import settings

settings.register_language(".java", "java")

cmd.map = {
           # Spoken-form    ->    ->    ->     Action object	
		
		# CCR PROGRAMMING STANDARD
		"iffae":                       Text("if() {")+Key("enter,up,left"),
        "shells":		                Text("else {")+Key("enter"),		
		#
		"switch":						Text("switch(){\ncase : break;\ndefault: break;")+Key("up,up,left,left"),
		"K states":						Text("case :")+Key("left"),
		"breaker":						Text("break;"),
		"default":						Text("default: "),
		#
		"do loop":						Text("do {}")+Key("left, enter:2"),
        "while loop":					Text("while ()")+Key("left"),
        "for loop":						Text("for (int i=0; i<VALUE; i++)"),
		"for each":						Text("for (CLASS TYPE : LIST)"),
		#
		"convert to integer":			Text("Integer.getInteger()")+ Key("left"),
		"convert to floating point":	Text("Double.parseDouble()")+ Key("left"),
		"convert to string":			Key("dquote, dquote, plus"),
		#
		"lodge and":                    Text(" && "),
        "lodge or":                     Text(" || "),
        "lodge not":                    Text("!"),
        #
        "print to console":				Text("java.lang.System.out.println()")+Key("left"),
        #
        "import":						Text( "import " ),
        #
        "function":						Text("SCOPE TYPE NAME(){}")+Key("left"),
        "class":						Text("class {}")+Key("left/5:2"),
        
		#
		"add comment":					Text( "//" ),
		"long comment":					Text("/**/")+Key("left,left"),
		#
		"value not":					Text("null"),
		#
		"return":						Text("return "),
		#
		"value true":					Text("true"),
		"value false":					Text("false"),
		
		
		# Java specific
		
		"it are in":					Text("Arrays.asList(NAME).contains(VALUE)"),
		"try states":                   Text("try"),
		"arrow":						Text("->"),
		
		"public":						Text("public "),
		"private":						Text("private "),
		"static":						Text("static "),
		"final":						Text("final "),
		"void":							Text("void "),
		
		"cast to double":				Text("(double)()")+Key("left"),
		"cast to integer":				Text("(int)()")+Key("left"),
				
		"new new":						Text("new "),
		"integer":						Text("int "),
		"big integer":					Text("Integer "),
		"double tie":					Text("double "),
		"big double":					Text("Double "),
		
		"string":						Text("String "),
		"boolean":						Text("boolean "),
		"substring":					Text("substring"),
     	
        "ternary":                      Text("()?:") + (Key("left") * 3),
		"this":							Text("this"),
        "array list":					Text("ArrayList"),
	   
     	"continue":						Text("continue"),
     	"sue iffae":					Text("if ()")+Key("left"),
     	"sue shells":					Text("else")+Key("enter"),
     	
     	"shell iffae":					Text("else if ()")+Key("left"),
     	"throw exception":              Text("throw new Exception()")+Key("left"),
     	"substring":					Text("substring"),
     	"character at":					Text("charAt"),
     	"is instance of":				Text(" instanceof "),
     	
     	
     	
     	
     	 
          }

cmd.extras   = [
           ]
cmd.defaults = {
           }
    

cmd.ncactive=True


cmd.ncmap = {
		"try catch":					Text("try{}catch(Exception e){}"),
		"deco override":				Text("@Override"),
		"iterate and remove":			Paste("for (Iterator<TYPE> iterator = NAME.iterator(); iterator.hasNext();) {\n\tString string = iterator.next();\nif (CONDITION) {\niterator.remove();\n}\n}"),
		"string builder":               Paste("StringBuilder builder = new StringBuilder(); builder.append(orgStr); builder.deleteCharAt(orgStr.length()-1);"),
          }

cmd.ncextras   = [
           
           ]
cmd.ncdefaults = {
           }
    