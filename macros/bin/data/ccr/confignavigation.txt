from dragonfly import *
from caster.lib import navigation, context, utilities
from caster.lib.dfplus.state.actions import ContextSeeker, Continuer, RegisteredAction
from caster.lib.dfplus.state.short import L, S, R
navigation.initialize_clipboard()

cmd.map = {
	
    # VoiceCoder-inspired
    "jump in":						Continuer([L(S(["cancel"], context.nav, ["right", "(~[~{~<"]))
                                                   ], time_in_seconds=0.1, repetitions=50 ),
    "jump out":						Continuer([L(S(["cancel"], context.nav, ["right", ")~]~}~>"]))
                                                   ], time_in_seconds=0.1, repetitions=50 ),
    "jump back":					Continuer([L(S(["cancel"], context.nav, ["left", "(~[~{~<"]))
                                                   ], time_in_seconds=0.1, repetitions=50 ),
    "fill <target>":				Key("escape, escape, end") +
    								Continuer([L(S(["cancel"], Function, context.fill_within_line))
                                                   ], time_in_seconds=0.2, repetitions=50 ),
    
    # fuzzy string matching command
    "(pita | Peter | PETA) <textnv> [brunt]":Function(navigation.pita, extra="textnv"), 
        
    # keyboard shortcuts
	'save':                         R(Key("c-s"), rspec="save", rdescript="Save"),
    'scratch':                      Playback([(["scratch", "that"], 0.0)]),
    'shock [<nnavi50>]':          	R(Key("enter"), rspec="shock", rdescript="Enter")* Repeat(extra="nnavi50"),
    
    "(<mtn_dir> | <mtn_mode> [<mtn_dir>]) [(<nnavi500> | <extreme>)]": R(Function(navigation.master_text_nav), rdescript="Keyboard Text Navigation"),
    
    
    "stoosh [<nnavi500>]":          Key("c-c")+R((Function(navigation.clipboard_to_file, extra="nnavi500")), rspec="stoosh", rdescript="Copy"),
    "cut [<nnavi500>]":             Key("c-x")+R(Function(navigation.clipboard_to_file, extra="nnavi500"), rspec="cut", rdescript="Cut"),
    "spark [<nnavi500>]":  			R(Function(navigation.drop, extra={"nnavi500"}), rspec="spark", rdescript="Paste"),
    
    "deli [<nnavi50>]":          	R(Key("del/5"), rspec="deli", rdescript="Delete") * Repeat(extra="nnavi50"),
    "clear [<nnavi50>]":           	R(Key("backspace/5:%(nnavi50)d"), rspec="clear", rdescript="Backspace"),
    "(cancel | escape)":            R(Key("escape"), rspec="cancel", rdescript="Cancel Action"),
    
    
    "shackle":						R(Key("home/5, s-end"), rspec="shackle", rdescript="Select Line"),
    "(tell | tau) <semi>":			R(Function(navigation.next_line), rspec="tell dock", rdescript="Complete Line"), 
	"duple [<nnavi50>]":			R(Key("escape, home, s-end, c-c, end, enter, c-v"), rspec="duple", rdescript="Duplicate Line") * Repeat(extra="nnavi50"),
	"Kraken":						R(Key("c-space"), rspec="Kraken", rdescript="Control Space"),
	     
    # text formatting
    "(<capitalization> <spacing> | <capitalization> | <spacing>) (bow|bowel) <textnv> [brunt]":  R(Function(navigation.master_format_text), rdescript="Text Format"), 
	
	}

cmd.extras = [
          IntegerRef("nnavi50", 1, 50),
          IntegerRef("nnavi500", 1, 500),
          Dictation("textnv"),
          
          Choice("capitalization",
                    {"yell": 1, "tie": 2,"Gerrish": 3,"sing":4, "laws":5
                    }),
          Choice("spacing",
                    {"gum": 1, "gun": 1, "spine": 2, "snake":3
                    }),
          Choice("semi",
                    {"dock": ";", "doc": ";", "sink": ""
                    }),
          
          
          
          navigation.TARGET_CHOICE,
          navigation.get_direction_choice("mtn_dir"),
          Choice("mtn_mode",
                {"shin": "s", "queue": "cs", "fly": "c",
                }),
          Choice("extreme",
                {"Wally": "way",
                }),
          

         ]
cmd.defaults ={
			"nnavi500": 1, "nnavi50": 1, "textnv": "", "capitalization": 0, "spacing":0, 
			"mtn_mode": None, "mtn_dir": "right", "extreme": None 
           }
           
           
           
           
cmd.ncactive=True

cmd.ncmap = {
        "<direction> <time_in_seconds>":	Continuer([L(S(["cancel"], Key, "%(direction)s"))], repetitions=1000 ),
        "erase multi clipboard":            Function(navigation.erase_multi_clipboard),
        "find":                         	Key("c-f"),
    	"replace":                      	Key("c-h"),
        "(F to | F2)":                      Key("f2"),
        "(F six | F6)":                     Key("f6"),
        "(F nine | F9)":                    Key("f9"),
        "de Gaulle [<n>]":                  Key("c-z") * Repeat(extra="n"),
        "red Gaulle [<n>]":                 Key("c-y") * Repeat(extra="n"),
        
        'kick':                         Function(navigation.kick),
        'kick mid':                     Function(navigation.kick_middle),
        'psychic':                         Function(navigation.kick_right),
        '(kick double|double kick)':    Playback([(["mouse", "double", "click"], 0.0)]),
        "shift right click":            Key("shift:down") + Mouse("right") + Key("shift:up"),
        "curse <direction> [<direction2>] [<nnavi500>] [<dokick>]":Function(navigation.curse, extra={"direction", "direction2", "nnavi500", "dokick"}),
        "left point":                   Playback([(["MouseGrid"], 0.1), (["four", "four"], 0.1), (["click"], 0.0)]),
        "right point":                  Playback([(["MouseGrid"], 0.1), (["six", "six"], 0.1), (["click"], 0.0)]),
        "center point":                 Playback([(["MouseGrid"], 0.1), (["click"], 0.0)]),
    
        "colic":                            Key("control:down") + Mouse("left") + Key("control:up"),
        "garb [<nnavi500>]":                Mouse("left")+Mouse("left")+Key("c-c")+Function(navigation.clipboard_to_file, extra="nnavi500"),
        "drop [<nnavi500>]":                Mouse("left")+Mouse("left")+Function(navigation.drop, extra="nnavi500"),
        
        "elite translation <text>":     Function(navigation.elite_text), 
		
		"sure stoosh":          Key("c-c"),
    	"sure cut":             Key("c-x"),
    	"sure spark":  			Key("c-v"),
          }

cmd.ncextras   = [
              Dictation("text"),
              Dictation("mim"),
              IntegerRef("n", 1, 50),
              IntegerRef("nnavi500", 1, 500),
              Choice("time_in_seconds",
                {"super slow": 5, "slow": 2, "normal": 0.6, "fast": 0.1, "superfast": 0.05
                }),
              navigation.get_direction_choice("direction"),
              navigation.get_direction_choice("direction2"),
              navigation.TARGET_CHOICE, 
              Choice("dokick",
                {"kick": 1, "psychic": 2
                }),
           ]
cmd.ncdefaults = {
			"n": 1, "mim":"", "nnavi500": 1, "direction2":"", "dokick": 0
           }